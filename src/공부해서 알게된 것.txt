*테이블이 자동으로 생성되게 만드는 기본조건(3가지)
1.resources->appllication.properties파일에서  spring.jpa.hibernate.ddl-auto=update 가 있어야 테이블이 자동으로 생성된다.
2.@Entity 어노테이션이 있는 엔터티 클래스가 존재해야 함
3.@Id가 있어야 함
 @Entity클래스 안에서 
 @Table(name = "users":테이블 이름 지정, 지정안하면 클래스 이름으로 테이블이 생성
 @Column 등 기타설정

 #spring.jpa.hibernate.ddl-auto=옵션값     옵션 정리
    옵션 값 	                동작
    none	        자동 생성 X (테이블을 직접 생성해야 함)
    validate	    테이블이 있는지만 확인, 없으면 에러 발생
    update	        기존 테이블이 없으면 생성하고, 필드 변경 시 업데이트
    create	        기존 테이블을 삭제 후 새로 생성
    create-drop	    앱 종료 시 테이블 삭제 (create와 유사)


===============================================================================================================
*빌더에 대한 설명
//****ApplicationEntity애 @Builder가 붙어 있음
// `@Builder`가 있는 경우, `builder()` 메서드를 사용하여 객체를 생성할 수 있다.  
// `@Setter`와 유사하게 특정 필드의 값을 지정할 수 있지만,  
// `@Builder`는 모든 필드를 지정할 필요 없이 일부 속성만 선택적으로 설정할 수 있다.  

// `@Setter`를 사용하면 객체를 생성한 후에도 `setXxx()` 메서드를 통해 값을 변경할 수 있지만,  
// `@Builder`는 아래와 같이 객체를 생성하면서 필드 값을 할당하기 때문에,  
// 한 번 생성된 객체의 값을 변경할 수 없다.  

// User user = User.builder()
//     .id(1L)
//     .name("종호")
//     .age(25)
//     .build(); // 객체 생성 완료

// 즉, `@Builder`를 사용하면 **객체가 불변(immutable)하게 유지되므로, 동시성 문제를 방지하고 안전한 코드 작성이 가능하다.